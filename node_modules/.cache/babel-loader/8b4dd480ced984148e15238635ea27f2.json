{"ast":null,"code":"import _regeneratorRuntime from \"/Users/carolineliu/Documents/SkillFindr/skillFindr/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/carolineliu/Documents/SkillFindr/skillFindr/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _assertThisInitialized from \"/Users/carolineliu/Documents/SkillFindr/skillFindr/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _possibleConstructorReturn from \"/Users/carolineliu/Documents/SkillFindr/skillFindr/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/carolineliu/Documents/SkillFindr/skillFindr/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/carolineliu/Documents/SkillFindr/skillFindr/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _toConsumableArray from \"/Users/carolineliu/Documents/SkillFindr/skillFindr/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/carolineliu/Documents/SkillFindr/skillFindr/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/carolineliu/Documents/SkillFindr/skillFindr/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { __rest } from 'tslib';\nimport React from 'react';\nimport { matchPath, Redirect, Route, withRouter, BrowserRouter, HashRouter } from 'react-router-dom';\nimport { NavContext, IonLifeCycleContext, DefaultIonLifeCycleContext } from '@ionic/react';\nvar count = 0;\n\nvar generateId = function generateId() {\n  return (count++).toString();\n};\n\nvar isDevMode = function isDevMode() {\n  return process && process.env && process.env.NODE_ENV === 'development';\n};\n\nvar RESTRICT_SIZE = 25;\n\nvar LocationHistory =\n/*#__PURE__*/\nfunction () {\n  function LocationHistory() {\n    _classCallCheck(this, LocationHistory);\n\n    this.locationHistory = [];\n  }\n\n  _createClass(LocationHistory, [{\n    key: \"add\",\n    value: function add(location) {\n      this.locationHistory.push(location);\n\n      if (this.locationHistory.length > RESTRICT_SIZE) {\n        this.locationHistory.splice(0, 10);\n      }\n    }\n  }, {\n    key: \"findLastLocation\",\n    value: function findLastLocation(url) {\n      var reversedLocations = _toConsumableArray(this.locationHistory).reverse();\n\n      var last = reversedLocations.find(function (x) {\n        return x.pathname.toLowerCase() === url.toLowerCase();\n      });\n      return last;\n    }\n  }]);\n\n  return LocationHistory;\n}();\n/**\n * The holistic view of all the Routes configured for an application inside of an IonRouterOutlet.\n */\n\n\nvar ViewStacks =\n/*#__PURE__*/\nfunction () {\n  function ViewStacks() {\n    _classCallCheck(this, ViewStacks);\n\n    this.viewStacks = {};\n  }\n\n  _createClass(ViewStacks, [{\n    key: \"get\",\n    value: function get(key) {\n      return this.viewStacks[key];\n    }\n  }, {\n    key: \"set\",\n    value: function set(key, viewStack) {\n      this.viewStacks[key] = viewStack;\n    }\n  }, {\n    key: \"getKeys\",\n    value: function getKeys() {\n      return Object.keys(this.viewStacks);\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(key) {\n      delete this.viewStacks[key];\n    }\n  }, {\n    key: \"findViewInfoByLocation\",\n    value: function findViewInfoByLocation(location, viewKey) {\n      var _this = this;\n\n      var view;\n      var match;\n      var viewStack;\n\n      if (viewKey) {\n        viewStack = this.viewStacks[viewKey];\n\n        if (viewStack) {\n          viewStack.views.some(matchView);\n        }\n      } else {\n        var keys = this.getKeys();\n        keys.some(function (key) {\n          viewStack = _this.viewStacks[key];\n          return viewStack.views.some(matchView);\n        });\n      }\n\n      var result = {\n        view: view,\n        viewStack: viewStack,\n        match: match\n      };\n      return result;\n\n      function matchView(v) {\n        var matchProps = {\n          exact: v.routeData.childProps.exact,\n          path: v.routeData.childProps.path || v.routeData.childProps.from,\n          component: v.routeData.childProps.component\n        };\n        match = matchPath(location.pathname, matchProps);\n\n        if (match) {\n          view = v;\n          return true;\n        }\n\n        return false;\n      }\n    }\n  }, {\n    key: \"findViewInfoById\",\n    value: function findViewInfoById() {\n      var _this2 = this;\n\n      var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var view;\n      var viewStack;\n      var keys = this.getKeys();\n      keys.some(function (key) {\n        var vs = _this2.viewStacks[key];\n        view = vs.views.find(function (x) {\n          return x.id === id;\n        });\n\n        if (view) {\n          viewStack = vs;\n          return true;\n        } else {\n          return false;\n        }\n      });\n      return {\n        view: view,\n        viewStack: viewStack\n      };\n    }\n  }]);\n\n  return ViewStacks;\n}();\n\nvar RouteManagerContext =\n/*@__PURE__*/\nReact.createContext({\n  viewStacks: new ViewStacks(),\n  syncView: function syncView() {\n    navContextNotFoundError();\n  },\n  hideView: function hideView() {\n    navContextNotFoundError();\n  },\n  setupIonRouter: function setupIonRouter() {\n    return Promise.reject(navContextNotFoundError());\n  },\n  removeViewStack: function removeViewStack() {\n    navContextNotFoundError();\n  },\n  transitionView: function transitionView() {\n    navContextNotFoundError();\n  }\n});\n\nfunction navContextNotFoundError() {\n  console.error('IonReactRouter not found, did you add it to the app?');\n}\n/**\n * The View component helps manage the IonPage's lifecycle and registration\n */\n\n\nvar View =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(View, _React$Component);\n\n  function View() {\n    _classCallCheck(this, View);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(View).apply(this, arguments));\n  }\n\n  _createClass(View, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      /**\n       * If we can tell if view is a redirect, hide it so it will work again in future\n       */\n      var view = this.props.view;\n\n      if (view.route.type === Redirect) {\n        this.props.onHideView(view.id);\n      } else if (view.route.type === Route && view.route.props.render) {\n        if (view.route.props.render().type === Redirect) {\n          this.props.onHideView(view.id);\n        }\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.ionPage) {\n        this.ionPage.removeEventListener('ionViewWillEnter', this.ionViewWillEnterHandler.bind(this));\n        this.ionPage.removeEventListener('ionViewDidEnter', this.ionViewDidEnterHandler.bind(this));\n        this.ionPage.removeEventListener('ionViewWillLeave', this.ionViewWillLeaveHandler.bind(this));\n        this.ionPage.removeEventListener('ionViewDidLeave', this.ionViewDidLeaveHandler.bind(this));\n      }\n    }\n  }, {\n    key: \"ionViewWillEnterHandler\",\n    value: function ionViewWillEnterHandler() {\n      this.context.ionViewWillEnter();\n    }\n  }, {\n    key: \"ionViewDidEnterHandler\",\n    value: function ionViewDidEnterHandler() {\n      this.context.ionViewDidEnter();\n    }\n  }, {\n    key: \"ionViewWillLeaveHandler\",\n    value: function ionViewWillLeaveHandler() {\n      this.context.ionViewWillLeave();\n    }\n  }, {\n    key: \"ionViewDidLeaveHandler\",\n    value: function ionViewDidLeaveHandler() {\n      this.context.ionViewDidLeave();\n    }\n  }, {\n    key: \"registerIonPage\",\n    value: function registerIonPage(page) {\n      this.ionPage = page;\n      this.ionPage.addEventListener('ionViewWillEnter', this.ionViewWillEnterHandler.bind(this));\n      this.ionPage.addEventListener('ionViewDidEnter', this.ionViewDidEnterHandler.bind(this));\n      this.ionPage.addEventListener('ionViewWillLeave', this.ionViewWillLeaveHandler.bind(this));\n      this.ionPage.addEventListener('ionViewDidLeave', this.ionViewDidLeaveHandler.bind(this));\n      this.ionPage.classList.add('ion-page-invisible');\n\n      if (isDevMode()) {\n        this.ionPage.setAttribute('data-view-id', this.props.view.id);\n      }\n\n      this.props.onViewSync(page, this.props.view.id);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return React.createElement(NavContext.Consumer, null, function (value) {\n        var newProvider = Object.assign({}, value, {\n          registerIonPage: _this3.registerIonPage.bind(_this3)\n        });\n        return React.createElement(NavContext.Provider, {\n          value: newProvider\n        }, _this3.props.children);\n      });\n    }\n  }], [{\n    key: \"contextType\",\n    get: function get() {\n      return IonLifeCycleContext;\n    }\n  }]);\n\n  return View;\n}(React.Component);\n/**\n * Manages the View's DOM lifetime by keeping it around long enough to complete page transitions before removing it.\n */\n\n\nvar ViewTransitionManager =\n/*#__PURE__*/\nfunction (_React$Component2) {\n  _inherits(ViewTransitionManager, _React$Component2);\n\n  function ViewTransitionManager(props) {\n    var _this4;\n\n    _classCallCheck(this, ViewTransitionManager);\n\n    _this4 = _possibleConstructorReturn(this, _getPrototypeOf(ViewTransitionManager).call(this, props));\n    _this4.ionLifeCycleContext = new DefaultIonLifeCycleContext();\n    _this4._isMounted = false;\n    _this4.state = {\n      show: true\n    };\n\n    _this4.ionLifeCycleContext.onComponentCanBeDestroyed(function () {\n      if (!_this4.props.mount) {\n        if (_this4._isMounted) {\n          _this4.setState({\n            show: false\n          }, function () {\n            _this4.context.hideView(_this4.props.id);\n          });\n        }\n      }\n    });\n\n    return _this4;\n  }\n\n  _createClass(ViewTransitionManager, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this._isMounted = true;\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this._isMounted = false;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var show = this.state.show;\n      return React.createElement(IonLifeCycleContext.Provider, {\n        value: this.ionLifeCycleContext\n      }, show && this.props.children);\n    }\n  }], [{\n    key: \"contextType\",\n    get: function get() {\n      return RouteManagerContext;\n    }\n  }]);\n\n  return ViewTransitionManager;\n}(React.Component);\n\nvar StackManager =\n/*#__PURE__*/\nfunction (_React$Component3) {\n  _inherits(StackManager, _React$Component3);\n\n  function StackManager(props) {\n    var _this5;\n\n    _classCallCheck(this, StackManager);\n\n    _this5 = _possibleConstructorReturn(this, _getPrototypeOf(StackManager).call(this, props));\n    _this5.routerOutletEl = React.createRef();\n    _this5.id = _this5.props.id || generateId();\n    _this5.handleViewSync = _this5.handleViewSync.bind(_assertThisInitialized(_this5));\n    _this5.handleHideView = _this5.handleHideView.bind(_assertThisInitialized(_this5));\n    return _this5;\n  }\n\n  _createClass(StackManager, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.context.setupIonRouter(this.id, this.props.children, this.routerOutletEl.current);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.context.removeViewStack(this.id);\n    }\n  }, {\n    key: \"handleViewSync\",\n    value: function handleViewSync(page, viewId) {\n      this.context.syncView(page, viewId);\n    }\n  }, {\n    key: \"handleHideView\",\n    value: function handleHideView(viewId) {\n      this.context.hideView(viewId);\n    }\n  }, {\n    key: \"renderChild\",\n    value: function renderChild(item) {\n      var component = React.cloneElement(item.route, {\n        computedMatch: item.routeData.match\n      });\n      return component;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this6 = this;\n\n      var context = this.context;\n      var viewStack = context.viewStacks.get(this.id);\n      var views = (viewStack || {\n        views: []\n      }).views.filter(function (x) {\n        return x.show;\n      });\n      var ionRouterOutlet = React.Children.only(this.props.children);\n      var childElements = views.map(function (view) {\n        return React.createElement(ViewTransitionManager, {\n          id: view.id,\n          key: view.key,\n          mount: view.mount\n        }, React.createElement(View, {\n          onViewSync: _this6.handleViewSync,\n          onHideView: _this6.handleHideView,\n          view: view\n        }, _this6.renderChild(view)));\n      });\n      var elementProps = {\n        ref: this.routerOutletEl\n      };\n\n      if (isDevMode()) {\n        elementProps['data-stack-id'] = this.id;\n      }\n\n      var routerOutletChild = React.cloneElement(ionRouterOutlet, elementProps, childElements);\n      return routerOutletChild;\n    }\n  }], [{\n    key: \"contextType\",\n    get: function get() {\n      return RouteManagerContext;\n    }\n  }]);\n\n  return StackManager;\n}(React.Component);\n\nvar NavManager =\n/*#__PURE__*/\nfunction (_React$Component4) {\n  _inherits(NavManager, _React$Component4);\n\n  function NavManager(props) {\n    var _this7;\n\n    _classCallCheck(this, NavManager);\n\n    _this7 = _possibleConstructorReturn(this, _getPrototypeOf(NavManager).call(this, props));\n    _this7.locationHistory = new LocationHistory();\n    _this7.state = {\n      goBack: _this7.goBack.bind(_assertThisInitialized(_this7)),\n      hasIonicRouter: function hasIonicRouter() {\n        return true;\n      },\n      navigate: _this7.navigate.bind(_assertThisInitialized(_this7)),\n      getStackManager: _this7.getStackManager.bind(_assertThisInitialized(_this7)),\n      getPageManager: _this7.getPageManager.bind(_assertThisInitialized(_this7)),\n      currentPath: _this7.props.location.pathname,\n      registerIonPage: function registerIonPage() {\n        return;\n      },\n      tabNavigate: _this7.tabNavigate.bind(_assertThisInitialized(_this7))\n    };\n    _this7.listenUnregisterCallback = _this7.props.history.listen(function (location) {\n      _this7.setState({\n        currentPath: location.pathname\n      });\n\n      _this7.locationHistory.add(location);\n    });\n\n    _this7.locationHistory.add({\n      hash: window.location.hash,\n      key: generateId(),\n      pathname: window.location.pathname,\n      search: window.location.search,\n      state: {}\n    });\n\n    return _this7;\n  }\n\n  _createClass(NavManager, [{\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.listenUnregisterCallback) {\n        this.listenUnregisterCallback();\n      }\n    }\n  }, {\n    key: \"goBack\",\n    value: function goBack(defaultHref) {\n      var _this$props$getActive = this.props.getActiveIonPage(),\n          activeIonPage = _this$props$getActive.view;\n\n      if (activeIonPage) {\n        var _this$props$findViewI = this.props.findViewInfoById(activeIonPage.prevId),\n            enteringView = _this$props$findViewI.view;\n\n        if (enteringView) {\n          var lastLocation = this.locationHistory.findLastLocation(enteringView.routeData.match.url);\n\n          if (lastLocation) {\n            this.props.onNavigate('replace', lastLocation.pathname + lastLocation.search, 'back');\n          } else {\n            this.props.onNavigate('replace', enteringView.routeData.match.url, 'back');\n          }\n        } else {\n          if (defaultHref) {\n            this.props.onNavigate('replace', defaultHref, 'back');\n          }\n        }\n      } else {\n        if (defaultHref) {\n          this.props.onNavigate('replace', defaultHref, 'back');\n        }\n      }\n    }\n  }, {\n    key: \"navigate\",\n    value: function navigate(path, direction) {\n      this.props.onNavigate('push', path, direction);\n    }\n  }, {\n    key: \"tabNavigate\",\n    value: function tabNavigate(path) {\n      this.props.onNavigate('replace', path, 'back');\n    }\n  }, {\n    key: \"getPageManager\",\n    value: function getPageManager() {\n      return function (children) {\n        return children;\n      };\n    }\n  }, {\n    key: \"getStackManager\",\n    value: function getStackManager() {\n      return StackManager;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(NavContext.Provider, {\n        value: this.state\n      }, this.props.children);\n    }\n  }]);\n\n  return NavManager;\n}(React.Component);\n\nvar RouteManager =\n/*#__PURE__*/\nfunction (_React$Component5) {\n  _inherits(RouteManager, _React$Component5);\n\n  function RouteManager(props) {\n    var _this8;\n\n    _classCallCheck(this, RouteManager);\n\n    _this8 = _possibleConstructorReturn(this, _getPrototypeOf(RouteManager).call(this, props));\n    _this8.listenUnregisterCallback = _this8.props.history.listen(_this8.historyChange.bind(_assertThisInitialized(_this8)));\n    _this8.handleNavigate = _this8.handleNavigate.bind(_assertThisInitialized(_this8));\n    _this8.state = {\n      viewStacks: new ViewStacks(),\n      hideView: _this8.hideView.bind(_assertThisInitialized(_this8)),\n      setupIonRouter: _this8.setupIonRouter.bind(_assertThisInitialized(_this8)),\n      removeViewStack: _this8.removeViewStack.bind(_assertThisInitialized(_this8)),\n      syncView: _this8.syncView.bind(_assertThisInitialized(_this8)),\n      transitionView: _this8.transitionView.bind(_assertThisInitialized(_this8))\n    };\n    return _this8;\n  }\n\n  _createClass(RouteManager, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(_prevProps, prevState) {\n      // Trigger a page change if the location or action is different\n      if (this.state.location && prevState.location !== this.state.location || prevState.action !== this.state.action) {\n        this.setActiveView(this.state.location, this.state.action);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.listenUnregisterCallback) {\n        this.listenUnregisterCallback();\n      }\n    }\n  }, {\n    key: \"hideView\",\n    value: function hideView(viewId) {\n      var viewStacks = Object.assign(new ViewStacks(), this.state.viewStacks);\n\n      var _viewStacks$findViewI = viewStacks.findViewInfoById(viewId),\n          view = _viewStacks$findViewI.view;\n\n      if (view) {\n        view.show = false;\n        view.ionPageElement = undefined;\n        view.isIonRoute = false;\n        view.prevId = undefined;\n        view.key = generateId();\n        this.setState({\n          viewStacks: viewStacks\n        });\n      }\n    }\n  }, {\n    key: \"historyChange\",\n    value: function historyChange(location, action) {\n      location.state = location.state || {\n        direction: this.currentDirection\n      };\n      this.currentDirection = undefined;\n      this.setState({\n        location: location,\n        action: action\n      });\n    }\n  }, {\n    key: \"setActiveView\",\n    value: function setActiveView(location, action) {\n      var _this9 = this;\n\n      var viewStacks = Object.assign(new ViewStacks(), this.state.viewStacks);\n      var direction = location.state && location.state.direction || 'forward';\n      var leavingView;\n      var viewStackKeys = viewStacks.getKeys();\n      viewStackKeys.forEach(function (key) {\n        var _viewStacks$findViewI2 = viewStacks.findViewInfoByLocation(location, key),\n            enteringView = _viewStacks$findViewI2.view,\n            enteringViewStack = _viewStacks$findViewI2.viewStack,\n            match = _viewStacks$findViewI2.match;\n\n        if (!enteringView || !enteringViewStack) {\n          return;\n        }\n\n        leavingView = viewStacks.findViewInfoById(_this9.activeIonPageId).view;\n\n        if (enteringView.isIonRoute) {\n          enteringView.show = true;\n          enteringView.mount = true;\n          enteringView.routeData.match = match;\n          _this9.activeIonPageId = enteringView.id;\n\n          if (leavingView) {\n            if (direction === 'forward') {\n              if (action === 'PUSH') {\n                /**\n                 * If the page is being pushed into the stack by another view,\n                 * record the view that originally directed to the new view for back button purposes.\n                 */\n                enteringView.prevId = enteringView.prevId || leavingView.id;\n              } else {\n                direction = direction || 'back';\n              }\n            }\n          }\n\n          _this9.removeOrphanedViews(enteringView, enteringViewStack);\n        } else {\n          enteringView.show = true;\n          enteringView.mount = true;\n          enteringView.routeData.match = match;\n        }\n      });\n\n      if (leavingView) {\n        if (!leavingView.isIonRoute) {\n          leavingView.mount = false;\n          leavingView.show = false;\n        }\n      }\n\n      this.setState({\n        viewStacks: viewStacks\n      }, function () {\n        var _this9$state$viewStac = _this9.state.viewStacks.findViewInfoById(_this9.activeIonPageId),\n            enteringView = _this9$state$viewStac.view,\n            viewStack = _this9$state$viewStac.viewStack;\n\n        if (enteringView && viewStack) {\n          var enteringEl = enteringView.ionPageElement ? enteringView.ionPageElement : undefined;\n          var leavingEl = leavingView && leavingView.ionPageElement ? leavingView.ionPageElement : undefined;\n\n          if (enteringEl) {\n            // Don't animate from an empty view\n            var navDirection = leavingEl && leavingEl.innerHTML === '' ? undefined : direction === 'none' ? undefined : direction;\n\n            _this9.transitionView(enteringEl, leavingEl, viewStack.routerOutlet, navDirection);\n          } else if (leavingEl) {\n            leavingEl.classList.add('ion-page-hidden');\n            leavingEl.setAttribute('aria-hidden', 'true');\n          }\n        }\n      });\n    }\n  }, {\n    key: \"removeOrphanedViews\",\n    value: function removeOrphanedViews(view, viewStack) {\n      var _this10 = this;\n\n      var viewsToRemove = viewStack.views.filter(function (v) {\n        return v.prevId === view.id;\n      });\n      viewsToRemove.forEach(function (v) {\n        _this10.removeOrphanedViews(v, viewStack); // If view is not currently visible, go ahead and remove it from DOM\n\n\n        if (v.ionPageElement.classList.contains('ion-page-hidden')) {\n          v.show = false;\n          v.ionPageElement = undefined;\n          v.isIonRoute = false;\n          v.prevId = undefined;\n          v.key = generateId();\n        }\n\n        v.mount = false;\n      });\n    }\n  }, {\n    key: \"setupIonRouter\",\n    value: function () {\n      var _setupIonRouter = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(id, children, routerOutlet) {\n        var _this11 = this;\n\n        var views, activeId, ionRouterOutlet, createViewItem;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                createViewItem = function _ref(child, location) {\n                  var viewId = generateId();\n                  var key = generateId();\n                  var route = child;\n                  var matchProps = {\n                    exact: child.props.exact,\n                    path: child.props.path || child.props.from,\n                    component: child.props.component\n                  };\n                  var match = matchPath(location.pathname, matchProps);\n                  var view = {\n                    id: viewId,\n                    key: key,\n                    routeData: {\n                      match: match,\n                      childProps: child.props\n                    },\n                    route: route,\n                    mount: true,\n                    show: !!match,\n                    isIonRoute: false\n                  };\n\n                  if (match && view.isIonRoute) {\n                    activeId = viewId;\n                  }\n\n                  return view;\n                };\n\n                views = [];\n                ionRouterOutlet = React.Children.only(children);\n                React.Children.forEach(ionRouterOutlet.props.children, function (child) {\n                  views.push(createViewItem(child, _this11.props.history.location));\n                });\n                _context.next = 6;\n                return this.registerViewStack(id, activeId, views, routerOutlet, this.props.location);\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function setupIonRouter(_x, _x2, _x3) {\n        return _setupIonRouter.apply(this, arguments);\n      }\n\n      return setupIonRouter;\n    }()\n  }, {\n    key: \"registerViewStack\",\n    value: function () {\n      var _registerViewStack = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(stack, activeId, stackItems, routerOutlet, _location) {\n        var _this12 = this;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", new Promise(function (resolve) {\n                  _this12.setState(function (prevState) {\n                    var prevViewStacks = Object.assign(new ViewStacks(), prevState.viewStacks);\n                    var newStack = {\n                      id: stack,\n                      views: stackItems,\n                      routerOutlet: routerOutlet\n                    };\n\n                    if (activeId) {\n                      _this12.activeIonPageId = activeId;\n                    }\n\n                    prevViewStacks.set(stack, newStack);\n                    return {\n                      viewStacks: prevViewStacks\n                    };\n                  }, function () {\n                    resolve();\n                  });\n                }));\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function registerViewStack(_x4, _x5, _x6, _x7, _x8) {\n        return _registerViewStack.apply(this, arguments);\n      }\n\n      return registerViewStack;\n    }()\n  }, {\n    key: \"removeViewStack\",\n    value: function removeViewStack(stack) {\n      var viewStacks = Object.assign(new ViewStacks(), this.state.viewStacks);\n      viewStacks.delete(stack);\n      this.setState({\n        viewStacks: viewStacks\n      });\n    }\n  }, {\n    key: \"syncView\",\n    value: function syncView(page, viewId) {\n      var _this13 = this;\n\n      this.setState(function (state) {\n        var viewStacks = Object.assign(new ViewStacks(), state.viewStacks);\n\n        var _viewStacks$findViewI3 = viewStacks.findViewInfoById(viewId),\n            view = _viewStacks$findViewI3.view;\n\n        view.ionPageElement = page;\n        view.isIonRoute = true;\n        return {\n          viewStacks: viewStacks\n        };\n      }, function () {\n        _this13.setActiveView(_this13.state.location || _this13.props.location, _this13.state.action);\n      });\n    }\n  }, {\n    key: \"transitionView\",\n    value: function transitionView(enteringEl, leavingEl, ionRouterOutlet, direction) {\n      var _this14 = this;\n\n      /**\n       * Super hacky workaround to make sure ionRouterOutlet is available\n       * since transitionView might be called before IonRouterOutlet is fully mounted\n       */\n      if (ionRouterOutlet && ionRouterOutlet.componentOnReady) {\n        this.commitView(enteringEl, leavingEl, ionRouterOutlet, direction);\n      } else {\n        setTimeout(function () {\n          _this14.transitionView(enteringEl, leavingEl, ionRouterOutlet, direction);\n        }, 10);\n      }\n    }\n  }, {\n    key: \"commitView\",\n    value: function () {\n      var _commitView = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(enteringEl, leavingEl, ionRouterOuter, direction) {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!(enteringEl === leavingEl)) {\n                  _context3.next = 2;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\");\n\n              case 2:\n                _context3.next = 4;\n                return ionRouterOuter.commit(enteringEl, leavingEl, {\n                  deepWait: true,\n                  duration: direction === undefined ? 0 : undefined,\n                  direction: direction,\n                  showGoBack: direction === 'forward',\n                  progressAnimation: false\n                });\n\n              case 4:\n                if (leavingEl && enteringEl !== leavingEl) {\n                  /** add hidden attributes */\n                  leavingEl.classList.add('ion-page-hidden');\n                  leavingEl.setAttribute('aria-hidden', 'true');\n                }\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function commitView(_x9, _x10, _x11, _x12) {\n        return _commitView.apply(this, arguments);\n      }\n\n      return commitView;\n    }()\n  }, {\n    key: \"handleNavigate\",\n    value: function handleNavigate(type, path, direction) {\n      this.currentDirection = direction;\n\n      if (type === 'push') {\n        this.props.history.push(path);\n      } else {\n        this.props.history.replace(path);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this15 = this;\n\n      return React.createElement(RouteManagerContext.Provider, {\n        value: this.state\n      }, React.createElement(NavManager, Object.assign({}, this.props, {\n        onNavigate: this.handleNavigate,\n        findViewInfoById: function findViewInfoById(id) {\n          return _this15.state.viewStacks.findViewInfoById(id);\n        },\n        findViewInfoByLocation: function findViewInfoByLocation(location) {\n          return _this15.state.viewStacks.findViewInfoByLocation(location);\n        },\n        getActiveIonPage: function getActiveIonPage() {\n          return _this15.state.viewStacks.findViewInfoById(_this15.activeIonPageId);\n        }\n      }), this.props.children));\n    }\n  }]);\n\n  return RouteManager;\n}(React.Component);\n\nvar RouteManagerWithRouter = withRouter(RouteManager);\nRouteManagerWithRouter.displayName = 'RouteManager';\n\nvar IonReactRouter =\n/*#__PURE__*/\nfunction (_React$Component6) {\n  _inherits(IonReactRouter, _React$Component6);\n\n  function IonReactRouter() {\n    _classCallCheck(this, IonReactRouter);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(IonReactRouter).apply(this, arguments));\n  }\n\n  _createClass(IonReactRouter, [{\n    key: \"render\",\n    value: function render() {\n      var _a = this.props,\n          children = _a.children,\n          props = __rest(_a, [\"children\"]);\n\n      return React.createElement(BrowserRouter, Object.assign({}, props), React.createElement(RouteManagerWithRouter, null, children));\n    }\n  }]);\n\n  return IonReactRouter;\n}(React.Component);\n\nvar IonReactHashRouter =\n/*#__PURE__*/\nfunction (_React$Component7) {\n  _inherits(IonReactHashRouter, _React$Component7);\n\n  function IonReactHashRouter() {\n    _classCallCheck(this, IonReactHashRouter);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(IonReactHashRouter).apply(this, arguments));\n  }\n\n  _createClass(IonReactHashRouter, [{\n    key: \"render\",\n    value: function render() {\n      var _a = this.props,\n          children = _a.children,\n          props = __rest(_a, [\"children\"]);\n\n      return React.createElement(HashRouter, Object.assign({}, props), React.createElement(RouteManagerWithRouter, null, children));\n    }\n  }]);\n\n  return IonReactHashRouter;\n}(React.Component);\n\nexport { IonReactHashRouter, IonReactRouter };","map":null,"metadata":{},"sourceType":"module"}